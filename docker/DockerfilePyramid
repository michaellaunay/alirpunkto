FROM ubuntu:22.04

# Disable interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Documentation on using debugging options
# To build the image with debugging tools:
#   docker build --build-arg BUILD_WITH_DEBUG=1 -t alirpunkto:debug .
# 
# To build the image without debugging tools (default):
#   docker build -t alirpunkto:prod .
# 
# To run the container specifying the variable after building:
#   docker run -e BUILD_WITH_DEBUG=1 -p 6543:6543 alirpunkto:prod
#   docker run -e BUILD_WITH_DEBUG=0 -p 6543:6543 alirpunkto:debug
#
# To use your own files (without automatic repository cloning):
#   docker run -v $(pwd):/home/alirpunkto/app -p 6543:6543 alirpunkto:prod
#
# To mount only the var directory for data persistence:
#   docker run -v $(pwd)/var:/home/alirpunkto/app/var -p 6543:6543 alirpunkto:prod

###########################################################################
# 1. Locale configuration
###########################################################################
RUN apt-get update && \
    apt-get install -y --no-install-recommends locales && \
    locale-gen en_US.UTF-8 && \
    update-locale LANG=en_US.UTF-8

ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8

###########################################################################
# 2. Installation of authentication and version control tools
###########################################################################
# Installing git for version control
# as well as gnupg2, gpg-agent and pinentry-curses for signature management
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      git \
      gnupg2 \
      gpg-agent \
      pinentry-curses

###########################################################################
# 3. Installation of compilation dependencies and Python3
###########################################################################
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      wget curl build-essential \
      python3 python3-dev python3-pip python3-venv \
      python3-setuptools python3-wheel \
      libxml2-dev libxslt1-dev zlib1g-dev libssl-dev libjpeg-dev libreadline-dev \
      graphviz libpcre3 libpcre3-dev libpcrecpp0v5 \
      libbz2-dev libzip-dev libsqlite3-dev \
      libfreetype6-dev libtiff-dev libncurses5-dev \
      libldap2-dev libsasl2-dev && \
    rm -rf /var/lib/apt/lists/*

###########################################################################
# 4. Installation of optional extensions (memcached)
###########################################################################
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      libmemcached11 libmemcached-dev memcached && \
    rm -rf /var/lib/apt/lists/*

###########################################################################
# 5. Environment variable for debugging tools
###########################################################################
# This variable can be defined during build or run
# BUILD_WITH_DEBUG=1 docker build ...
# or
# docker run -e BUILD_WITH_DEBUG=1 ...
ARG BUILD_WITH_DEBUG=0
ENV BUILD_WITH_DEBUG=${BUILD_WITH_DEBUG}

###########################################################################
# 5.1 Installation of basic utilities
###########################################################################
# Always install ca-certificates which is essential
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates && \
    update-ca-certificates && \
    rm -rf /var/lib/apt/lists/*

###########################################################################
# 5.2 Conditional installation of complementary utilities
###########################################################################
# Conditional installation of net-tools and vim for editing
RUN if [ "$BUILD_WITH_DEBUG" = "1" ] ; then \
        apt-get update && \
        apt-get install -y --no-install-recommends \
          net-tools vim && \
        rm -rf /var/lib/apt/lists/* ; \
    fi

###########################################################################
# 5.3 Network debugging tools, conditionally installed
###########################################################################
RUN if [ "$BUILD_WITH_DEBUG" = "1" ] ; then \
        apt-get update && \
        apt-get install -y --no-install-recommends \
          telnet dnsutils iputils-ping curl && \
        rm -rf /var/lib/apt/lists/* ; \
    fi

###########################################################################
# 6. Creation of the "alirpunkto" user
###########################################################################
RUN groupadd -g 1001 alirpunkto && \
    useradd -m -u 1001 -g 1001 -s /bin/bash alirpunkto

# Creation of the working directory and assignment of permissions
RUN mkdir -p /home/alirpunkto/app && chown -R alirpunkto:alirpunkto /home/alirpunkto
WORKDIR /home/alirpunkto/app

###########################################################################
# 7. Volume configuration and script preparation
###########################################################################
# The volume will be created if it doesn't already exist
# If no mounting is performed, the startup script will clone the repository
VOLUME ["/home/alirpunkto/app/var"]

# Copy the startup script and set execution permissions
COPY start_pyramid.sh /start_pyramid.sh
RUN chmod +x /start_pyramid.sh && \
    chown alirpunkto:alirpunkto /start_pyramid.sh

# Ensure the alirpunkto user has the necessary permissions
RUN chown -R alirpunkto:alirpunkto /home/alirpunkto

###########################################################################
# 8. Switch to the "alirpunkto" user
###########################################################################
USER alirpunkto

# Expose the port for waitress
EXPOSE 6543

# Set the script as the entry point
ENTRYPOINT ["/start_pyramid.sh"]

CMD ["production.ini"]