# description: forgot password view
# author: Michaël Launay
# date: 2023-06-15

from pyramid.view import view_config
from pyramid_zodbconn import get_connection
from alirpunkto.utils import (
    is_not_a_valid_email_address,
    get_member_by_email,
    update_member_from_ldap,
    get_member_by_oid,
    send_email_to_member
)
from pyramid.request import Request
from typing import Dict, Optional, Union

from alirpunkto.models.member import (
    Member,
    EmailSendStatus,
    MemberDatas
)
from alirpunkto.constants_and_globals import (
    _,
    LDAP_ADMIN_OID,
    MEMBERS_BEING_MODIFIED,
    log
)
from alirpunkto.constants_and_globals import (
    CANDIDATURE_OID,
    SEED_LENGTH
)

import BTrees
import transaction

@view_config(route_name='forgot_password', renderer='alirpunkto:templates/forgot_password.pt')
def forgot_password(request):
    """Forgot password view.
    Send an email to the user with a link to reset his password
    
    Args:
        request (pyramid.request.Request): the request
    """
    log.debug(f"forgot_password: {request.method} {request.url}")
    transaction = request.tm
    # 1) AlirPunkto displays the forgot_password.pt zpt to enter the mail 
    if 'submit' in request.POST:
        # 2) The user has entered his mail and validated
        mail = request.POST['mail'] if 'mail' in request.POST else None
        if not mail:
            log.warning('forgot_password: No mail provided')
            request.session.flash(_('forget_no_mail'), 'error')
            return {"error":_('forget_no_mail')}
        # 2.1) AlirPunkto checks that the mail is valid
        if err:= is_not_a_valid_email_address(mail, check_mx=False):
            log.warning('forgot_password: Invalid email address: {}'.format(mail[:512]))
            # 2.1.1) If not, AlirPunkto displays an error message
            request.session.flash(err["error"], 'error')
            # 2.1.2) Return to 1
            return err

        # 3) AlirPunkto checks that the email exists in ldap
        members = get_member_by_email(mail)
        if not members:
            # 3.1) If the mail does not exist, AlirPunkto displays a message indicating that if the user exists, he will receive an email
            request.session.flash(_('forget_email_in_member_list'), 'warning')
            # 3.2) End of the procedure
            return {"error":_('forget_email_in_member_list')}
        # 4) AlirPunkto retrieves information about the user from the ldap
        if len(members) > 1:
            log.warning(f'forgot_password: Multiple members found for mail: {mail[:512]}')
        member = members[0]
        uid = member['uid']
        if uid == LDAP_ADMIN_OID:
            log.warning(f'forgot_password: Admin user cannot reset password: {mail[:512]}')
            request.session.flash(_('forget_admin_user'), 'error')
            return {"error":_('forget_admin_user')}
        # 5) If an instance of Member (an application, or any other
        # derived object) exists for this OID it's updated from LDAP, if not, a MemberDatas
        # instance is created with LDAP informations, and stored in the MemberDatas list.
        # The details of the email sent to the member, such as the link, will
        # be generated by the instance's methods.
        persitent_user_datas = update_member_from_ldap(uid, request)
        if not persitent_user_datas:
            return {"error":_('forget_email_in_member_list')}       
        # 5.1) AlirPunkto checks if there is a user being modified
        # get the list of users being modified
        root = get_connection(request).root()
        if MEMBERS_BEING_MODIFIED not in root:
            root[MEMBERS_BEING_MODIFIED] = BTrees.OOBTree.BTree()
            transaction.commit()
        reset_members = root[MEMBERS_BEING_MODIFIED]
        # Add the user to the list of users being modified
        reset_members[uid] = persitent_user_datas
        transaction.commit()
        # Change state to reset password
        # 6) AlirPunkto generates a hashed password reset token
        # 7) AlirPunkto creates a password reset event and adds the token to it
        # 8) AlirPunkto creates a link to the persistent user with the token
        # 9) AlirPunkto sends an email to the user with the link
        persitent_user_datas.state = UserDatas.STATE_RESET_PASSWORD
        email_template = "reset_password_email"
        send_email_to_member(
            request,
            persitent_user_datas, 
            'forgot_password',
            email_template,
            'reset_password_email_subject',
            'forgot_password'
        )       
        try:
            transaction.commit()
            persitent_user_datas.add_email_send_status(
                EmailSendStatus.SENT,
                email_template
            )
            return {"message":_('forget_email_sent')}
        except Exception as e:
            log.error(
                f"Error while reset password {persitent_user_datas.oid} : {e}"
            )
            persitent_user_datas.add_email_send_status(
                EmailSendStatus.ERROR,
                email_template
            )
            return {"error":_('forget_email_send_error')}
    elif 'modify' in request.POST:
        # 11) The user receives the email and clicks on the link
        # 11.1) If the link is invalid or expired, AlirPunkto displays an error message
        # 11.2) Return to 1
        # 12) AlirPunkto displays the forgot_password.pt zpt to enter the new password
        # 13) The user enters his new password and validates
        # 14) AlirPunkto checks that the password is valid and meets the security constraints
        # 14.1) If the password is not valid, AlirPunkto displays an error message
        ...
    else :
        return {}

    # 2) L'utilisateur saisit son mail et valide
    # 3) AlirPunkto vérifie que le mail existe dans ldap
    # 3.1) Si le mail n'existe pas, AlirPunkto affiche un message indiquant que si l'utilisateur existe, il recevra un mail 
    # 3.2) Fin de la procédure
    # 4) AlirPunkto récupère les informations concernant l'utilisateur depuis le ldap
    # 5) AlirPunkto regarde s'il existe une candidature pour l'utilisateur
    # 5.1) Si non, AlirPunkto crée une candidature à partir des informations du ldap
    # 5.2) Si oui, AlirPunkto récupère la candidature et la met à jour avec les informations du ldap (priorité au ldap)
    # 6) AlirPunkto génère un token hashé de réinitialisation du mot de passe
    # 7) AlirPunkto crée un événement de réinitialisation du mot de passe et lui ajoute le token
    # 8) AlirPunkto crée un lien vers la candidature avec le token
    # 9) AlirPunkto envoie un mail à l'utilisateur avec le lien
    # 10) AlirPunkto affiche un message indiquant que le mail a été envoyé (même message que 3.1)
    # 11) L'utilisateur reçoit le mail et clique sur le lien
    # 11.1) Si le lien est invalide ou expiré, AlirPunkto affiche un message d'erreur
    # 11.2) Retour en 1
    # 12) AlirPunkto affiche la zpt forgot_password.pt de saisie du nouveau mot de passe
    # 13) L'utilisateur saisit son nouveau mot de passe et valide
    # 14) AlirPunkto vérifie que le mot de passe est valide et respecte les contraintes de sécurité
    # 14.1) Si le mot de passe n'est pas valide, AlirPunkto affiche un message d'erreur
    # 14.2) Retour en 12
    # 15) AlirPunkto met à jour le mot de passe dans le ldap
    # 16) AlirPunkto met à jour les événements de la candidature
    # 17) AlirPunkto affiche la zpt forgot_password.pt de confirmation de changement de mot de passe
    # 18) AlirPunkto envoie un mail à l'utilisateur pour le prévenir du changement de mot de passe
    return {}

def _retrieve_member(
        request: Request
    ) -> Union[MemberDatas, Dict]:
    """Retrieve an existing member from the session or URL.

    Parameters:
    - request (Request): The pyramid request object.

    Returns:
    - tuple: A tuple containing the member object and an error dict if applicable.
    """
    # Check if the member is already in the request
    if CANDIDATURE_OID in request.session :
        member = get_member_by_oid(request.session[CANDIDATURE_OID], request)
        if member :
            return member, None

    # If the member is not in the request, try to retrieve it from the URL
    encrypted_oid = request.params.get("oid", None)
    if encrypted_oid:
        decrypted_oid, seed = decrypt_oid(
            encrypted_oid,
            SEED_LENGTH,
            request.registry.settings['session.secret'])
        member = get_member_by_oid(decrypted_oid, request)
        if member is None:
            error = _('member_not_found')
            return None, {'member': member,
                'MemberTypes': MemberTypes,
                'error': error}
        if seed != member.email_send_status_history[-1].seed:
            error = _('url_is_obsolete')
            return None, {'member': member,
                'MemberTypes': MemberTypes,
                'error': error,
                'url_obsolete': True}
        request.session[CANDIDATURE_OID] = member.oid
        return member, None
    else:
        return None, None